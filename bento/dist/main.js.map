{"version":3,"sources":["webpack:///./src/$_lazy_route_resource lazy namespace object","webpack:///./src/app/amai.service.ts","webpack:///./src/app/app-routing.module.ts","webpack:///./src/app/app.component.css","webpack:///./src/app/app.component.html","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.module.ts","webpack:///./src/app/create-user/create-user.component.css","webpack:///./src/app/create-user/create-user.component.html","webpack:///./src/app/create-user/create-user.component.ts","webpack:///./src/app/crud/crud.component.css","webpack:///./src/app/crud/crud.component.html","webpack:///./src/app/crud/crud.component.ts","webpack:///./src/app/home/home.component.css","webpack:///./src/app/home/home.component.html","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/main-nav/main-nav.component.css","webpack:///./src/app/main-nav/main-nav.component.html","webpack:///./src/app/main-nav/main-nav.component.ts","webpack:///./src/app/panel/panel.component.css","webpack:///./src/app/panel/panel.component.html","webpack:///./src/app/panel/panel.component.ts","webpack:///./src/app/users-table/users-table-datasource.ts","webpack:///./src/app/users-table/users-table.component.css","webpack:///./src/app/users-table/users-table.component.html","webpack:///./src/app/users-table/users-table.component.ts","webpack:///./src/environments/environment.ts","webpack:///./src/main.ts"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error('Cannot find module \"' + req + '\".');\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./src/$$_lazy_route_resource lazy recursive\";","import { Injectable } from '@angular/core';\r\nimport { HttpClient } from '@angular/common/http';\r\nimport { Observable,of } from 'rxjs';\r\nimport { User } from './User';\r\n@Injectable()\r\nexport class AmaiService {\r\n\r\n    //local API url\r\n    url : string = \"http://localhost:9000\";\r\n    //url : string = \"\";\r\n    /*since i'm new at ts i don't exactly understatnd why\r\n     * the constructor requires de http var on it\r\n     */\r\n    constructor(private http: HttpClient) { }\r\n\r\n    /* this functions returns the array of object that is given by the api\r\n     */\r\n     getProductsObservable(): Observable<any> {\r\n         return this.http.get(this.url+\"/show\");\r\n     } \r\n\r\n    deleteProduct( id: number ) {\r\n        console.log(\"delete\");\r\n        this.http.delete(this.url+\"/delete/\"+id).subscribe();\r\n    }\r\n\r\n    createUser( name: string, age: number, gender: string, userEmail: string,\r\n        aLevel: string, role: string ) {\r\n        console.log(\"create\");\r\n        \r\n        this.http.post(this.url+\"/insert\",\r\n            {UserName:name, UserAge:age, UserGender:gender, UserEmail:userEmail,\r\n                UserAcademicLevel: aLevel, UserRole: role})\r\n            .subscribe(\r\n            res => Response );\r\n    }\r\n}\r\n","import { NgModule } from '@angular/core';\nimport { RouterModule, Routes, ExtraOptions } from '@angular/router';\nimport { CommonModule } from '@angular/common';\n\nimport { HomeComponent }        from './home/home.component';\nimport { UsersTableComponent }        from './users-table/users-table.component';\nimport { CreateUserComponent }        from './create-user/create-user.component';\nimport { CrudComponent }        from './crud/crud.component';\nimport { PanelComponent }   from './panel/panel.component';\n\n// Pretty self explicatory we specify a route and it's component.\nconst routes: Routes = [\n    { path: '', component: UsersTableComponent },\n    { path: 'tools', component: CreateUserComponent },\n    { path: 'panel', component: PanelComponent }\n];\n\n@NgModule({\n    imports: [ RouterModule.forRoot(routes)],\n  exports: [ RouterModule ]\n})\nexport class AppRoutingModule {}\n","module.exports = \"/* Application-wide Styles */\\r\\nh1 {\\r\\n    color: #369;\\r\\n    font-family: Arial, Helvetica, sans-serif;\\r\\n    font-size: 250%;\\r\\n}\\r\\nh2, h3 {\\r\\n    color: #444;\\r\\n    font-family: Arial, Helvetica, sans-serif;\\r\\n    font-weight: lighter;\\r\\n}\\r\\nbody {\\r\\n    height: 100%;\\r\\n    width: 100%;\\r\\n}\\r\\nbody, input[text], button {\\r\\n    color: #888;\\r\\n    font-family: Cambria, Georgia;\\r\\n}\\r\\n/* everywhere else */\\r\\n* {\\r\\n    font-family: Arial, Helvetica, sans-serif;\\r\\n}\\r\\n/*\\r\\nheader {\\r\\n    background-color: #1b1b1b;\\r\\n    color: white;\\r\\n    grid-area: head;\\r\\n}\\r\\n\\r\\nheader h1{\\r\\n    text-align: center;\\r\\n    padding: 8px;\\r\\n    margin: auto;\\r\\n    color: white;\\r\\n}\\r\\n*/\\r\\n/*\\r\\nnav {\\r\\n    background-color: #212121;\\r\\n    border-right: 5px solid #1b1b1b;\\r\\n    grid-area: nav;\\r\\n}\\r\\n\\r\\nnav a {\\r\\n    padding: 8px;\\r\\n    display: block;\\r\\n    color: white;\\r\\n    text-decoration: none;\\r\\n    background-color: #f44336;\\r\\n}\\r\\n*/\\r\\n/*\\r\\n.sidenav-container{\\r\\n    grid-area: nav;\\r\\n}\\r\\n*/\\r\\n/*\\r\\n.active{\\r\\n    background-color: red !important;\\r\\n}\\r\\n\\r\\nmain {\\r\\n    color: #eeeeee;\\r\\n    min-height: 100vh;\\r\\n    padding: 16px;\\r\\n    /* background-color: #212121; */\\r\\n/*\\r\\n    grid-area: main;\\r\\n}\\r\\n\\r\\n\\r\\nfooter {\\r\\n    color: #eeeeee;\\r\\n    background-color: #1b1b1b;\\r\\n    grid-column: foot;\\r\\n}\\r\\n\\r\\nfooter p{\\r\\n    text-align: center;\\r\\n    padding: 8px;\\r\\n    margin: auto;\\r\\n    color: white;\\r\\n}\\r\\n\\r\\n#page {\\r\\n    display: grid;\\r\\n    width: 100%;\\r\\n    display: grid;\\r\\n    grid-template: /*[header-left] \\\"head head head\\\" 11% [header-right]\\r\\n                 [main-left]   \\\"nav main main\\\" 79%  [main-right]\\r\\n                 /*[footer-left] \\\"nav main main\\\" 10% [footer-right]\\r\\n                 / 15% 1fr;\\r\\n}\\r\\n*/\\r\\n\\r\\n\"","module.exports = \" <section id=\\\"page\\\">\\n     <!--\\n    <header> <h1> Test Page </h1> </header>\\n   <!-- <nav>\\n        <!-- RouterLinkActive it's a class from Angular than let us highlight the button when\\n            it's selected, routerLinkActiveOptions it's used to ensure that only will happen on selected \\n        <a [routerLinkActive]=\\\"'active'\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" routerLink=\\\"/\\\">Home</a>\\n        <a [routerLinkActive]=\\\"'active'\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" class=\\\"\\\" routerLink=\\\"/crud\\\">crud</a>\\n        <a [routerLinkActive]=\\\"'active'\\\" [routerLinkActiveOptions]=\\\"{exact:true}\\\" class=\\\"\\\" routerLink=\\\"/panel\\\">panel</a>\\n   </nav> -->\\n    <app-main-nav></app-main-nav>\\n        <!-- This components returns the component specified in the app-routing module\\n    <main>\\n            in the variable const routes \\n    <router-outlet></router-outlet>\\n   <app-panel></app-panel>\\n    </main>\\n        -->\\n\\n     <!--\\n    <footer> <p> Footer</p></footer>\\n        -->\\n</section>\\n\"","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.css']\n})\nexport class AppComponent {\n  title = 'app';\n}\n","import { BrowserModule } from '@angular/platform-browser';\r\nimport { BrowserAnimationsModule } from '@angular/platform-browser/animations';\r\nimport { NgModule } from '@angular/core';\r\nimport { FormsModule } from '@angular/forms';\r\nimport { HttpClientModule } from '@angular/common/http';\r\n\r\nimport { AppComponent } from './app.component';\r\nimport { HomeComponent } from './home/home.component';\r\nimport { CrudComponent } from './crud/crud.component';\r\nimport { AppRoutingModule } from './app-routing.module';\r\nimport { AmaiService } from './amai.service';\r\nimport { PanelComponent } from './panel/panel.component';\nimport { MatGridListModule, MatCardModule, MatMenuModule, MatIconModule,\n    MatButtonModule, MatToolbarModule, MatSidenavModule, MatListModule,\n    MatTableModule, MatPaginatorModule, MatSortModule, MatInputModule, \n    MatSelectModule,MatOptionModule  /*, MatFormFieldModule */ } from '@angular/material';\nimport {MatFormFieldModule } from '@angular/material/form-field';\nimport { LayoutModule } from '@angular/cdk/layout';\nimport { MainNavComponent } from './main-nav/main-nav.component';\nimport { UsersTableComponent } from './users-table/users-table.component';\nimport { CreateUserComponent } from './create-user/create-user.component';\r\n\r\n\r\n@NgModule({\r\n  declarations: [\r\n    AppComponent,\r\n    HomeComponent,\r\n    CrudComponent,\r\n    PanelComponent,\r\n    MainNavComponent,\r\n    UsersTableComponent,\r\n    CreateUserComponent\r\n  ],\r\n  imports: [\r\n    BrowserModule,\r\n    BrowserAnimationsModule,\r\n    FormsModule,\r\n    AppRoutingModule,\r\n    HttpClientModule,\r\n    MatGridListModule,\r\n    MatCardModule,\r\n    MatMenuModule,\r\n    MatIconModule,\r\n    MatButtonModule,\r\n    LayoutModule,\r\n    MatToolbarModule,\r\n    MatSidenavModule,\r\n    MatListModule,\r\n    MatTableModule,\r\n    MatPaginatorModule,\r\n    MatSortModule\r,\n    MatFormFieldModule,\n    MatInputModule,\n    MatSelectModule,\n    MatOptionModule\n  ],\r\n  providers: [AmaiService],\r\n  bootstrap: [AppComponent]\r\n})\r\nexport class AppModule { }\r\n","module.exports = \".container{\\r\\n    margin: 20px;\\r\\n    display: -ms-grid;\\r\\n    display: grid;\\r\\n        grid-template-areas: \\\"card-create card-show\\\";\\r\\n    grid-gap: 20px;\\r\\n}\\r\\n\\r\\n@media only screen and (max-width: 800px) {\\r\\n    .container{\\r\\n        margin: 20px;\\r\\n        display: -ms-grid;\\r\\n        display: grid;\\r\\n            grid-template-areas: \\\"card-create\\\"\\r\\n                             \\\"card-show\\\";\\r\\n        grid-gap: 20px;\\r\\n    }\\r\\n    .card-create{\\r\\n        -ms-grid-row: 1;\\r\\n        -ms-grid-column: 1;\\r\\n    }\\r\\n    .card-show{\\r\\n        -ms-grid-row: 2;\\r\\n        -ms-grid-column: 1;\\r\\n    }\\r\\n}\\r\\n\\r\\n.form{\\r\\n    display: -ms-grid;\\r\\n    display: grid;\\r\\n}\\r\\n\\r\\n.card-create{\\r\\n    -ms-grid-row: 1;\\r\\n    -ms-grid-column: 1;\\r\\n    grid-area: card-create;\\r\\n    display: -ms-grid;\\r\\n    display: grid;\\r\\n    max-width: 400px;\\r\\n}\\r\\n\\r\\ninput::-webkit-outer-spin-button,\\r\\ninput::-webkit-inner-spin-button {\\r\\n    display: none;\\r\\n}\\r\\n\\r\\ninput{\\r\\n    -moz-appearance: textfield;\\r\\n}\\r\\n\\r\\n.mat-form-field{\\r\\n    margin: 7px 7px;\\r\\n\\r\\n}\\r\\n\\r\\n.card-show{\\r\\n    -ms-grid-row: 1;\\r\\n    -ms-grid-column: 2;\\r\\n    grid-area: card-show;\\r\\n    display: -ms-grid;\\r\\n    display: grid;\\r\\n    max-width: 400px;\\r\\n}\\r\\n\\r\\n#id-search{\\r\\n    text-align: right;\\r\\n    width: 25%;\\r\\n    position: absolute;\\r\\n    top: -20px;\\r\\n    right: 10px;\\r\\n}\\r\\n\\r\\n.btn{\\r\\n    margin: 20px 5px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n<mat-card class=\\\"card-create\\\">\\n  <mat-card-content>\\n    <mat-card-title> Crear usuario </mat-card-title>\\n<form action=\\\"\\\" method=\\\"POST\\\" accept-charset=\\\"utf-8\\\">\\n    <div class=\\\"form\\\">\\n        <!-- nombre -->\\n      <mat-form-field id=\\\"name\\\" hintLabel=\\\"Max 40 characters\\\">\\n        <input [(ngModel)]=\\\"user.UserName\\\" name=\\\"name\\\" matInput #input maxlength=\\\"40\\\" placeholder=\\\"Nombre\\\">\\n        <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/40</mat-hint>\\n      </mat-form-field>\\n\\n        <!-- genero -->\\n      <mat-form-field>\\n        <mat-select  [(ngModel)]=\\\"user.Gender\\\" name=\\\"gender\\\" id=\\\"gender\\\" placeholder=\\\"Genero\\\">\\n          <mat-option value=\\\"Hombre\\\">Hombre</mat-option>\\n         <mat-option value=\\\"Mujer\\\">Mujer</mat-option>\\n        </mat-select>\\n        <mat-hint align=\\\"end\\\">Selecciona tu genero ^</mat-hint>\\n      </mat-form-field>\\n\\n        <!-- edad -->\\n      <mat-form-field id=\\\"age\\\" hintLabel=\\\"\\\">\\n        <input  [(ngModel)]=\\\"user.Age\\\" name=\\\"age\\\" matInput #input type=\\\"number\\\" min=\\\"0\\\" max=\\\"120\\\" placeholder=\\\"0\\\">\\n        <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/120</mat-hint>\\n      </mat-form-field>\\n\\n        <!-- Email -->\\n      <mat-form-field id=\\\"email\\\" hintLabel=\\\"Max 40 characters\\\">\\n        <input  [(ngModel)]=\\\"user.UserEmail\\\" name=\\\"email\\\" matInput #input maxlength=\\\"40\\\" type=\\\"email\\\" placeholder=\\\"Email@example.com\\\">\\n        <mat-hint align=\\\"end\\\">{{input.value?.length || 0}}/40</mat-hint>\\n      </mat-form-field>\\n\\n        <!-- Niverl academico -->\\n      <mat-form-field>\\n        <mat-select  [(ngModel)]=\\\"user.AcademicLevel\\\" name=\\\"academicLevel\\\" id=\\\"academicLevel\\\" placeholder=\\\"Nivel educativo\\\">\\n          <mat-option value=\\\"Educacion Media\\\">Educacion media</mat-option>\\n          <mat-option value=\\\"Bachillerato\\\">Bachillerato</mat-option>\\n         <mat-option value=\\\"Universidad\\\">Universidad</mat-option>\\n        </mat-select>\\n        <mat-hint align=\\\"end\\\">Selecciona tu genero ^</mat-hint>\\n      </mat-form-field>\\n\\n        <button class=\\\"btn\\\" mat-flat-button \\n            (click)=\\\"createUser(user.UserName,user.Age,user.Gender,user.UserEmail, user.AcademicLevel,user.Role)\\\" \\n            type=\\\"submit\\\">Crear</button>\\n    </div> <!-- from div -->\\n    </form>\\n\\n  </mat-card-content>\\n</mat-card>\\n\\n<mat-card class=\\\"card-show\\\">\\n    <mat-card-title> Buscar usuario \\n      <mat-form-field id=\\\"id-search\\\" hintLabel=\\\"\\\">\\n        <input matInput placeholder=\\\"id\\\">\\n      </mat-form-field>\\n    </mat-card-title>\\n    <mat-label> Nombre: </mat-label>\\n    <mat-label> Genero: </mat-label>\\n    <mat-label> Edad: </mat-label>\\n    <mat-label> Email: </mat-label>\\n    <mat-label> Nivel Educativo: </mat-label>\\n</mat-card>\\n\\n</div>\\n\"","import { Component, OnInit } from '@angular/core';\nimport { User } from '../User';\nimport { AmaiService } from '../amai.service';\nimport { EventEmitter, Output } from '@angular/core';\n\n@Component({\n  selector: 'app-create-user',\n  templateUrl: './create-user.component.html',\n  styleUrls: ['./create-user.component.css']\n})\nexport class CreateUserComponent implements OnInit {\n    user : User = {\n        UserName: '',\n        Age: 0,\n        Gender: '',\n        UserEmail: '',\n        AcademicLevel: '',\n        Role: 'Estudiante',\n    }\n\n    constructor( private service: AmaiService) { }\n\n        /*\n    @Output()\n    created = new EventEmitter<string>();\n         */\n\n    createUser( name: string, age: number, gender: string, userEmail: string,\n        aLevel: string, role: string) {\n        console.log(\"on create\");\n        console.log(name,age,gender,userEmail,aLevel,role);\n        this.service.createUser(name,age,gender,userEmail,aLevel,role);\n        //reset placeholder\n        this.user = {\n            UserName: '',\n            Age: 0,\n            Gender: '',\n            UserEmail: '',\n            AcademicLevel: '',\n            Role: 'Estudiante',\n        };\n        console.log(this.user);\n        //this.created.emit('created');\n    }\n\n  ngOnInit() {\n  }\n\n}\n","module.exports = \"\"","module.exports = \"<h2> Users List </h2>\\r\\n<app-users-table>\\r\\n</app-users-table>\\r\\n\\r\\n<!--\\r\\n  <h1 class=\\\"mat-h1\\\">Users</h1>\\r\\n<ul *ngIf=\\\"users\\\"> <!-- Angular if, if items (object in home.component.ts) render this. -->\\r\\n<!--\\r\\n    <li *ngFor=\\\"let user of users\\\"> <!-- Angular for -->\\r\\n<!--\\r\\n  <h1 class=\\\"mat-h1\\\">Users</h1>\\r\\n      {{user.UserName}}\\r\\n      {{user.UserAge}}\\r\\n      {{user.UserEmail}}\\r\\n      {{user.ID}}\\r\\n      <form  action=\\\"\\\" [ngFormOptions]=\\\"{ updateOn: 'submit' }\\\" #myForm=\\\"ngForm\\\" method=\\\"POST\\\" accept-charset=\\\"utf-8\\\">\\r\\n          <button class=\\\"btn\\\" type=\\\"submit\\\" (click)=\\\"onSubmit(user.ID)\\\">delete </button>\\r\\n      </form>\\r\\n   </li>\\r\\n</ul>\\r\\n    <app-create-product (created)=\\\"refresh($event)\\\"></app-create-product>\\r\\n-->\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AmaiService } from '../amai.service';\r\nimport { User } from '../User';\r\nimport { UsersTableComponent } from '../users-table/users-table.component';\r\n\r\n@Component({\r\n  selector: 'app-crud',\r\n  templateUrl: './crud.component.html',\r\n  styleUrls: ['./crud.component.css'],\r\n})\r\n\r\nexport class CrudComponent implements OnInit {\r\n    /*we created a class named Products as a kind of template that will\r\n     *contain the same info as the JSON from the API returns\r\n     */\r\n    users : User[];\r\n\r\n    constructor(private service : AmaiService ) {\r\n    }\r\n\r\n    onSubmit( id: number ){\r\n        console.log(\"on submit\");\r\n        this.service.deleteProduct(id);\r\n        this.update();\r\n    }\r\n\r\n    refresh($event){\r\n        this.update();\r\n    }\r\n\r\n    update(){\r\n        this.service.getProductsObservable().subscribe(res => {\r\n            this.users = res;\r\n      });\r\n    }\r\n\r\n    ngOnInit() {\r\n        this.update();\r\n    }\r\n\r\n}\r\n","module.exports = \"\"","module.exports = \"<ul *ngIf=\\\"users\\\"> <!-- Angular if, if items (object in home.component.ts) render this. -->\\r\\n    <li *ngFor=\\\"let user of users\\\"> <!-- Angular for -->\\r\\n      {{user.UserName}}\\r\\n      {{user.UserAge}}\\r\\n      {{user.UserEmail}}\\r\\n   </li>\\r\\n</ul>\\r\\n<p>home<p>\\r\\n\"","import { Component, OnInit } from '@angular/core';\r\nimport { AmaiService } from '../amai.service';\r\nimport { User } from '../User';\r\n\r\n@Component({\r\n  selector: 'app-home',\r\n  templateUrl: './home.component.html',\r\n  styleUrls: ['./home.component.css']\r\n})\r\nexport class HomeComponent implements OnInit {\r\n    /*we created a class named Products as a kind of template that will\r\n     *contain the same info as the JSON from the API returns\r\n     */\r\n    users : User[];\r\n\r\n    constructor(private service : AmaiService ) {\r\n    }\r\n\r\n    ngOnInit() {\r\n      this.service.getProductsObservable().subscribe(res => {\r\n        this.users = res;\r\n      });\r\n    }\r\n\r\n}\r\n","module.exports = \"\\n.toolbar{\\n    display: -ms-grid;\\n    display: grid;\\n}\\n\\n.content{\\n    display: -ms-grid;\\n    display: grid;\\n    grid-gap: 75px;\\n}\\n\\n.sidenav-container {\\n  height: 100%;\\n}\\n\\n.sidenav {\\n  width: 200px;\\n}\\n\\n.mat-toolbar.mat-primary {\\n  position: -webkit-sticky;\\n  position: sticky;\\n  top: 0;\\n}\\n\"","module.exports = \"<mat-sidenav-container class=\\\"sidenav-container\\\">\\n  <mat-sidenav\\n    #drawer\\n    class=\\\"sidenav\\\"\\n    fixedInViewport=\\\"true\\\"\\n    [attr.role]=\\\"(isHandset$ | async) ? 'dialog' : 'navigation'\\\"\\n    [mode]=\\\"(isHandset$ | async) ? 'over' : 'side'\\\"\\n    [opened]=\\\"!(isHandset$ | async)\\\">\\n    <mat-toolbar color=\\\"primary\\\">Menu</mat-toolbar>\\n    <mat-nav-list>\\n      <a mat-list-item routerLink=\\\"/\\\">Users</a>\\n      <a mat-list-item routerLink=\\\"/tools\\\">Tools</a>\\n      <a mat-list-item routerLink=\\\"/panel\\\">Place Holder</a>\\n    </mat-nav-list>\\n  </mat-sidenav>\\n  <mat-sidenav-content>\\n      <div class=\\\"toolbar\\\">\\n    <mat-toolbar color=\\\"primary\\\" style=\\\"z-index:1; position:fixed\\\">\\n      <button\\n        type=\\\"button\\\"\\n        aria-label=\\\"Toggle sidenav\\\"\\n        mat-icon-button\\n        (click)=\\\"drawer.toggle()\\\"\\n        *ngIf=\\\"isHandset$ | async\\\">\\n        <mat-icon aria-label=\\\"Side nav toggle icon\\\">menu</mat-icon>\\n      </button>\\n      <span class=\\\"title-bar\\\">Admin Module</span>\\n    </mat-toolbar>\\n      </div>\\n    <!-- Add Content Here -->\\n      <div class=\\\"content\\\">\\n    <router-outlet></router-outlet>\\n      </div>\\n  </mat-sidenav-content>\\n</mat-sidenav-container>\\n\"","import { Component } from '@angular/core';\nimport { BreakpointObserver, Breakpoints, BreakpointState } from '@angular/cdk/layout';\nimport { Observable } from 'rxjs';\nimport { map } from 'rxjs/operators';\n\n@Component({\n  selector: 'app-main-nav',\n  templateUrl: './main-nav.component.html',\n  styleUrls: ['./main-nav.component.css']\n})\nexport class MainNavComponent {\n\n  isHandset$: Observable<boolean> = this.breakpointObserver.observe(Breakpoints.Handset)\n    .pipe(\n      map(result => result.matches)\n    );\n    \n  constructor(private breakpointObserver: BreakpointObserver) {}\n  \n  }\n","module.exports = \".grid-container {\\n  margin: 20px;\\n}\\n\\n.dashboard-card {\\n  position: absolute;\\n  top: 15px;\\n  left: 15px;\\n  right: 15px;\\n  bottom: 15px;\\n}\\n\\n.more-button {\\n  position: absolute;\\n  top: 5px;\\n  right: 10px;\\n}\\n\\n.dashboard-card-content {\\n  text-align: center;\\n}\"","module.exports = \"<div class=\\\"grid-container\\\">\\n  <h1 class=\\\"mat-h1\\\">Dashboard</h1>\\n  <mat-grid-list cols=\\\"2\\\" rowHeight=\\\"350px\\\">\\n    <mat-grid-tile *ngFor=\\\"let card of cards\\\" [colspan]=\\\"card.cols\\\" [rowspan]=\\\"card.rows\\\">\\n      <mat-card class=\\\"dashboard-card\\\">\\n        <mat-card-header>\\n          <mat-card-title>\\n            {{card.title}}\\n            <button mat-icon-button class=\\\"more-button\\\" [matMenuTriggerFor]=\\\"menu\\\" aria-label=\\\"Toggle menu\\\">\\n              <mat-icon>more_vert</mat-icon>\\n            </button>\\n            <mat-menu #menu=\\\"matMenu\\\" xPosition=\\\"before\\\">\\n              <button mat-menu-item>Expand</button>\\n              <button mat-menu-item>Remove</button>\\n            </mat-menu>\\n          </mat-card-title>\\n        </mat-card-header>\\n        <mat-card-content class=\\\"dashboard-card-content\\\">\\n          <div>Card Content Here</div>\\n        </mat-card-content>\\n      </mat-card>\\n    </mat-grid-tile>\\n  </mat-grid-list>\\n</div>\\n\"","import { Component } from '@angular/core';\nimport { map } from 'rxjs/operators';\nimport { Breakpoints, BreakpointState, BreakpointObserver } from '@angular/cdk/layout';\n\n@Component({\n  selector: 'app-panel',\n  templateUrl: './panel.component.html',\n  styleUrls: ['./panel.component.css']\n})\nexport class PanelComponent {\n  /** Based on the screen size, switch from standard to one column per row */\n  cards = [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n    /*\n  cards = this.breakpointObserver.observe(Breakpoints.Handset).pipe(\n    map(({ matches }) => {\n      if (matches) {\n        return [\n          { title: 'Card 1', cols: 1, rows: 1 },\n          { title: 'Card 2', cols: 1, rows: 1 },\n          { title: 'Card 3', cols: 1, rows: 1 },\n          { title: 'Card 4', cols: 1, rows: 1 }\n        ];\n      }\n\n      return [\n        { title: 'Card 1', cols: 2, rows: 1 },\n        { title: 'Card 2', cols: 1, rows: 1 },\n        { title: 'Card 3', cols: 1, rows: 2 },\n        { title: 'Card 4', cols: 1, rows: 1 }\n      ];\n    })\n  );\n     */\n\n  constructor(private breakpointObserver: BreakpointObserver) {}\n}\n","import { DataSource } from '@angular/cdk/collections';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { map } from 'rxjs/operators';\nimport { Observable, of as observableOf, merge } from 'rxjs';\nimport { User } from '../User';\nimport { AmaiService } from '../amai.service';\n\n/*\nexport interface UsersTableItem {\n  name: string;\n  id: number;\n}\n */\n\n/*\nconst EXAMPLE_DATA: UsersTableItem[] = [\n  {id: 1, name: 'Hydrogen'},\n  {id: 2, name: 'Helium'},\n  {id: 3, name: 'Lithium'},\n  {id: 4, name: 'Beryllium'},\n  {id: 5, name: 'Boron'},\n  {id: 6, name: 'Carbon'},\n  {id: 7, name: 'Nitrogen'},\n  {id: 8, name: 'Oxygen'},\n  {id: 9, name: 'Fluorine'},\n  {id: 10, name: 'Neon'},\n  {id: 11, name: 'Sodium'},\n  {id: 12, name: 'Magnesium'},\n  {id: 13, name: 'Aluminum'},\n  {id: 14, name: 'Silicon'},\n  {id: 15, name: 'Phosphorus'},\n  {id: 16, name: 'Sulfur'},\n  {id: 17, name: 'Chlorine'},\n  {id: 18, name: 'Argon'},\n  {id: 19, name: 'Potassium'},\n  {id: 20, name: 'Calcium'},\n];\n */\n\n/**\n * Data source for the UsersTable view. This class should\n * encapsulate all logic for fetching and manipulating the displayed data\n * (including sorting, pagination, and filtering).\n */\nexport class UsersTableDataSource extends DataSource<User> {\n  usersList: User[] = [];\n\n  constructor(private paginator: MatPaginator, private sort: MatSort, private service : AmaiService) {\n    super();\n  }\n  /**\n   * Connect this data source to the table. The table will only update when\n   * the returned stream emits new items.\n   * @returns A stream of the items to be rendered.\n   */\n  connect(): Observable<User[]> {\n    // Combine everything that affects the rendered data into one update\n    // stream for the data-table to consume.\n    this.service.getProductsObservable().subscribe(res => {\n        this.usersList = res;\n      });\n\n      return this.service.getProductsObservable();\n    /*\n    const dataMutations = [\n      observableOf(this.usersList),\n      this.paginator.page,\n      this.sort.sortChange\n    ];\n\n    // Set the paginators length\n    this.paginator.length = this.usersList.length;\n\n    return merge(...dataMutations).pipe(map(() => {\n      return this.getPagedData(this.getSortedData([...this.usersList]));\n    }));\n     */\n  }\n\n  /**\n   *  Called when the table is being destroyed. Use this function, to clean up\n   * any open connections or free any held resources that were set up during connect.\n   */\n  disconnect() {}\n\n  /**\n   * Paginate the data (client-side). If you're using server-side pagination,\n  }\n\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getPagedData(data: User[]) {\n    const startIndex = this.paginator.pageIndex * this.paginator.pageSize;\n    return data.splice(startIndex, this.paginator.pageSize);\n  }\n\n  /**\n   * Sort the data (client-side). If you're using server-side sorting,\n   * this would be replaced by requesting the appropriate data from the server.\n   */\n  private getSortedData(data: User[]) {\n    if (!this.sort.active || this.sort.direction === '') {\n      return data;\n    }\n\n    return data.sort((a, b) => {\n      const isAsc = this.sort.direction === 'asc';\n      switch (this.sort.active) {\n        case 'name': return compare(a.UserName, b.UserName, isAsc);\n        case 'email': return compare(+a.UserEmail, +b.UserEmail, isAsc);\n        default: return 0;\n      }\n    });\n  }\n}\n\n/** Simple sort comparator for example ID/Name columns (for client-side sorting). */\nfunction compare(a, b, isAsc) {\n  return (a < b ? -1 : 1) * (isAsc ? 1 : -1);\n}\n","module.exports = \".container{\\r\\n    margin: 20px;\\r\\n}\\r\\n\"","module.exports = \"<div class=\\\"container\\\">\\n  <h1 class=\\\"mat-h1\\\">Usuarios</h1>\\n<div class=\\\"mat-elevation-z2\\\">\\n  <table mat-table #table [dataSource]=\\\"dataSource\\\" matSort style=\\\"width: 100%;\\\">\\n\\n    <!-- button -->\\n    <ng-container matColumnDef=\\\"Options\\\">\\n     <th mat-header-cell *matHeaderCellDef mat-sort-header> Options </th>\\n      <td mat-cell *matCellDef=\\\"let row\\\" >\\n          <button mat-flat-button> <mat-icon>delete</mat-icon> </button>\\n      </td>\\n    </ng-container>\\n\\n    <!-- Id Column -->\\n    <ng-container matColumnDef=\\\"IdUser\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>ID</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.Id}}</td>\\n    </ng-container>\\n\\n    <!-- Role Column -->\\n    <ng-container matColumnDef=\\\"UserRole\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Role</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.Role}}</td>\\n    </ng-container>\\n\\n    <!-- Name Column -->\\n    <ng-container matColumnDef=\\\"UserName\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Name</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.UserName}}</td>\\n    </ng-container>\\n\\n    <!-- Gender Column -->\\n    <ng-container matColumnDef=\\\"UserGender\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Gender</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.Gender}}</td>\\n    </ng-container>\\n\\n    <!-- Email Column -->\\n    <ng-container matColumnDef=\\\"UserEmail\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Email</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.UserEmail}}</td>\\n    </ng-container>\\n\\n    <!-- Academic Level Column -->\\n    <ng-container matColumnDef=\\\"UserAcademicLevel\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Academic Level</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.AcademicLevel}}</td>\\n    </ng-container>\\n\\n    <!-- Rate Column -->\\n    <ng-container matColumnDef=\\\"UserRate\\\">\\n      <th mat-header-cell *matHeaderCellDef mat-sort-header>Rate</th>\\n      <td mat-cell *matCellDef=\\\"let row\\\">{{row.Rate}}</td>\\n    </ng-container>\\n\\n    <tr mat-header-row *matHeaderRowDef=\\\"displayedColumns\\\"></tr>\\n    <tr mat-row *matRowDef=\\\"let row; columns: displayedColumns;\\\"></tr>\\n  </table>\\n\\n  <mat-paginator #paginator\\n    [length]=\\\"dataSource?.data?.length\\\"\\n    [pageIndex]=\\\"0\\\"\\n    [pageSize]=\\\"50\\\"\\n    [pageSizeOptions]=\\\"[25, 50, 100, 250]\\\">\\n  </mat-paginator>\\n</div>\\n</div>\\n\"","import { Component, OnInit, ViewChild } from '@angular/core';\nimport { MatPaginator, MatSort } from '@angular/material';\nimport { UsersTableDataSource } from './users-table-datasource';\nimport { AmaiService } from '../amai.service';\n\n@Component({\n  selector: 'app-users-table',\n  templateUrl: './users-table.component.html',\n  styleUrls: ['./users-table.component.css']\n})\nexport class UsersTableComponent implements OnInit {\n  @ViewChild(MatPaginator) paginator: MatPaginator;\n  @ViewChild(MatSort) sort: MatSort;\n  dataSource: UsersTableDataSource;\n\n    constructor(private service : AmaiService ) {}\n\n  /** Columns displayed in the table. Columns IDs can be added, removed, or reordered. */\n    displayedColumns = ['Options','IdUser','UserRole','UserName',\n        'UserGender', 'UserEmail','UserAcademicLevel','UserRate'];\n\n  ngOnInit() {\n    this.dataSource = new UsersTableDataSource(this.paginator, this.sort,this.service);\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build ---prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * In development mode, to ignore zone related error stack frames such as\n * `zone.run`, `zoneDelegate.invokeTask` for easier debugging, you can\n * import the following file, but please comment it out in production mode\n * because it will have performance impact when throw error\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.log(err));\n"],"sourceRoot":""}